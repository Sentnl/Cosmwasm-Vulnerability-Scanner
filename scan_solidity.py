import os
import openai
import fnmatch
from reportlab.lib.pagesizes import letter
from reportlab.lib import colors
from reportlab.platypus import SimpleDocTemplate, Paragraph, Spacer, Table, TableStyle
from reportlab.lib.styles import getSampleStyleSheet
from reportlab.platypus import Image

def create_pdf_report(report_path, contract_path, vulnerabilities):
    styles = getSampleStyleSheet()
    doc = SimpleDocTemplate(report_path, pagesize=letter)
    
    # Title
    title = f"Vulnerability Report for {os.path.basename(contract_path)}"
    doc_title = Paragraph(title, styles['Heading1'])
    
    # Vulnerabilities
    vulnerabilities_list = [Paragraph(f"{idx}. {vuln}", styles['BodyText']) for idx, vuln in enumerate(vulnerabilities, 1)]
    
    # Table
    data = [[doc_title,]] + [[vuln] for vuln in vulnerabilities_list]
    table = Table(data)
    
    # Table style
    table.setStyle(TableStyle([
        ('BACKGROUND', (0, 0), (-1, 0), colors.grey),
        ('TEXTCOLOR', (0, 0), (-1, 0), colors.whitesmoke),
        ('ALIGN', (0, 0), (-1, -1), 'LEFT'),
        ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),
        ('FONTSIZE', (0, 0), (-1, 0), 14),
        ('BOTTOMPADDING', (0, 0), (-1, 0), 12),
        ('BACKGROUND', (0, 1), (-1, -1), colors.beige),
        ('GRID', (0, 0), (-1, -1), 1, colors.black)
    ]))
    # Logo
    logo_path = "logo.png"  # Replace with the path to your logo file or a URL
    logo = Image(logo_path, width=100, height=100)
    logo.hAlign = 'LEFT'

    # Build PDF
    content = [logo, Spacer(1, 12), table, Spacer(1, 12)]
    doc.build(content)
    
def find_solidity_files(path):
    solidity_files = []

    for root, _, filenames in os.walk(path):
        for filename in fnmatch.filter(filenames, '*.sol'):
            solidity_files.append(os.path.join(root, filename))

    return solidity_files

def scan_solidity_file(file_path, api_key,engine):
    # Connect to the OpenAI API
    openai.api_key = api_key

    # Read the Solidity file content
    with open(file_path) as f:
        solidity_code = f.read()

    # Make a request to the OpenAI API to analyze the Solidity file
    result = openai.Completion.create(engine=engine, prompt=f"Analyze vulnerabilities in the following Solidity code:\n{solidity_code}\n\nVulnerabilities:", max_tokens=100, n=1, stop=None, temperature=0.5)
    print("API response:", result.choices[0].text.strip())
    return result.choices[0].text.strip()

def main():
    api_key = os.environ['INPUT_OPENAI_API_KEY']
    engine = os.environ['INPUT_ENGINE']
    repo_path = os.getcwd()
    solidity_files = find_solidity_files(repo_path)

    for file in solidity_files:
        print(f"Scanning {file}...")
        vulnerabilities = scan_solidity_file(file, api_key, engine)

        # Generate the PDF report
        report_name = f"{os.path.splitext(os.path.basename(file))[0]}_vulnerabilities.pdf"
        report_path = os.path.join(os.path.dirname(file), report_name)
        create_pdf_report(report_path, file, vulnerabilities)

if __name__ == "__main__":
    main()
